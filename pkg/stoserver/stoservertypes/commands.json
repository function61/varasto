[
	{
		"command": "volume.Create",
		"chain": "public",
		"ctor": [],
		"crudNature": "create",
		"title": "Create a volume",
		"fields": [
			{ "key": "Name" },
			{ "key": "Quota", "type": "integer", "unit": "MiB", "help": "1 GiB = 1024 MiB. 1 TiB = 1048576 MiB\nDon't worry about this - you can change this later." }
		],
		"info": [
			"A volume is just metadata and thus creating it doesn't create any files yet or require knowing its data location.",
			"You decide where the volume's files are stored when you mount it. First mounting of volume writes the volume ID in the mounted location so you can't accidentally mount the wrong volume in the future. I.e. first mount of volume \"locks it\" to the actual storage location.",
			"If you're creating this volume for a cloud account with 'unlimited' space, just define an arbitrary quota that you're confortable with - you can change it later."
		]
	},
	{
		"command": "volume.VerifyIntegrity",
		"chain": "public",
		"ctor": ["Id"],
		"crudNature": "create",
		"title": "Verify data integrity",
		"fields": [
			{ "key": "Id", "type": "integer", "hideIfDefaultValue": true },
			{ "key": "Start", "title": "Start immediately", "type": "checkbox" }
		]
	},
	{
		"command": "volume.ChangeQuota",
		"chain": "public",
		"ctor": ["Id", "Quota"],
		"crudNature": "update",
		"title": "Change quota",
		"fields": [
			{ "key": "Id", "type": "integer", "hideIfDefaultValue": true },
			{ "key": "Quota", "type": "integer", "unit": "MiB", "help": "1 GiB = 1024 MiB. 1 TiB = 1048576 MiB" }
		]
	},
	{
		"command": "volume.Rename",
		"chain": "public",
		"ctor": ["Id", "Name"],
		"crudNature": "update",
		"title": "Rename",
		"fields": [
			{ "key": "Id", "type": "integer", "hideIfDefaultValue": true },
			{ "key": "Name" }
		]
	},
	{
		"command": "volume.ChangeDescription",
		"chain": "public",
		"ctor": ["Id", "Description"],
		"crudNature": "update",
		"title": "Change description",
		"fields": [
			{ "key": "Id", "type": "integer", "hideIfDefaultValue": true },
			{ "key": "Description", "optional": true }
		]
	},
	{
		"command": "volume.ChangeNotes",
		"chain": "public",
		"ctor": ["Id", "Notes"],
		"crudNature": "update",
		"title": "Change notes",
		"fields": [
			{ "key": "Id", "type": "integer", "hideIfDefaultValue": true },
			{ "key": "Notes", "type": "multiline", "optional": true }
		]
	},
	{
		"command": "volume.SetTopology",
		"chain": "public",
		"ctor": ["Id", "Enclosure", "Slot"],
		"crudNature": "update",
		"title": "Set topology",
		"fields": [
			{ "key": "Id", "type": "integer", "hideIfDefaultValue": true },
			{ "key": "Enclosure", "optional": true },
			{ "key": "Slot", "type": "integer", "optional": true }
		]
	},
	{
		"command": "volume.ChangeZone",
		"chain": "public",
		"ctor": ["Id", "Zone"],
		"crudNature": "update",
		"title": "Change zone",
		"fields": [
			{ "key": "Id", "type": "integer", "hideIfDefaultValue": true },
			{ "key": "Zone" }
		]
	},
	{
		"command": "volume.SmartSetId",
		"chain": "public",
		"ctor": ["Id", "SmartId"],
		"crudNature": "update",
		"title": "Set SMART ID",
		"info": [
			"Setting this enables SMART polling for this volume",
			"Removing this disables SMART polling"
		],
		"fields": [
			{ "key": "Id", "type": "integer", "hideIfDefaultValue": true },
			{ "key": "SmartId", "title": "SMART ID", "placeholder": "/dev/disk/0122023d-a355-44fa-865d-1744a9bb0c3b", "help": "Usually path to the Linux disk device", "optional": true }
		]
	},
	{
		"command": "volume.SetTechnology",
		"chain": "public",
		"ctor": ["Id", "Technology"],
		"crudNature": "update",
		"title": "Set technology",
		"fields": [
			{ "key": "Id", "type": "integer", "hideIfDefaultValue": true },
			{ "key": "Technology", "type": "VolumeTechnology", "help": "disk-hdd | disk-ssd | cloud" }
		]
	},
	{
		"command": "volume.SetSerialNumber",
		"chain": "public",
		"ctor": ["Id", "SerialNumber"],
		"crudNature": "update",
		"title": "Set serial number",
		"fields": [
			{ "key": "Id", "type": "integer", "hideIfDefaultValue": true },
			{ "key": "SerialNumber", "optional": true }
		]
	},
	{
		"command": "volume.SetManufacturingDate",
		"chain": "public",
		"ctor": ["Id", "ManufacturingDate"],
		"crudNature": "update",
		"title": "Set manufacturing date",
		"fields": [
			{ "key": "Id", "type": "integer", "hideIfDefaultValue": true },
			{ "key": "ManufacturingDate", "type": "date", "optional": true }
		]
	},
	{
		"command": "volume.SetWarrantyEndDate",
		"chain": "public",
		"ctor": ["Id", "WarrantyEndDate"],
		"crudNature": "update",
		"title": "Set warranty end date",
		"fields": [
			{ "key": "Id", "type": "integer", "hideIfDefaultValue": true },
			{ "key": "WarrantyEndDate", "type": "date", "optional": true }
		]
	},
	{
		"command": "volume.MountLocal",
		"chain": "public",
		"ctor": ["Id"],
		"crudNature": "create",
		"title": "Mount a local volume",
		"info": [
			"If you want to dedicate a disk/partition for Varasto use, mount it in '/mnt/varasto/VOL_NAME' and use '/mnt/varasto/VOL_NAME/varasto-VOL_NAME' as the path",
			"If you're testing out Varasto OR don't want to dedicate a partition to Varasto yet, you can just specify something like '/mnt/varasto/test/varasto-test' as the path",
			"If the directory does not exist, it will be created for you",
			"NOTE: The volume will be seen as 'offline' for the first a few seconds"
		],
		"fields": [
			{ "key": "Id", "type": "integer", "hideIfDefaultValue": true },
			{ "key": "Path", "placeholder": "/mnt/varasto/fry/varasto-fry" }
		]
	},
	{
		"command": "volume.MountS3",
		"chain": "public",
		"ctor": ["Id"],
		"crudNature": "create",
		"title": "Mount AWS S3-compliant volume",
		"fields": [
			{ "key": "Id", "type": "integer", "hideIfDefaultValue": true },
			{ "key": "Bucket", "placeholder": "myorg-varasto-fry" },
			{ "key": "PathPrefix", "title": "Path prefix", "placeholder": "/varasto-fry/", "help": "If you don't want prefix, use \"/\"", "validation_regex": "/$" },
			{ "key": "RegionId", "placeholder": "eu-central-1" },
			{ "key": "AccessKeyId", "placeholder": "AKIAUZHTE3U35WCD5EHB" },
			{ "key": "AccessKeySecret", "placeholder": "wXQJhB..." }
		]
	},
	{
		"command": "volume.MountGoogleDrive",
		"chain": "public",
		"ctor": ["Id"],
		"crudNature": "create",
		"title": "Mount Google Drive volume",
		"fields": [
			{ "key": "Id", "type": "integer", "hideIfDefaultValue": true },
			{ "key": "FolderId", "title": "Drive folder ID", "placeholder": "1znjU234YCcLW96u6_WrZtms2vFvGy55e" },
			{ "key": "ClientId", "title": "Client ID", "placeholder": "27661..-...apps.googleusercontent.com" },
			{ "key": "ClientSecret", "title": "Client secret", "placeholder": "EhFl_eV.." },
			{ "key": "AuthCode", "title": "Authorization code", "placeholder": "(Leave blank first)", "help": "This authorizes Varasto to access your Google Drive files", "optional": true }
		],
		"info": [
			"Read the documentation first!",
			"1) Leave 'Authorization code' blank & submit this form",
			"2) You'll be asked to open new tab to authorize, and you'll get the code",
			"3) Enter code here and submit again"
		]
	},
	{
		"command": "volume.Unmount",
		"chain": "public",
		"ctor": ["Id"],
		"crudNature": "delete",
		"title": "Unmount",
		"info": [
			"Unmounting a volume will stop Varasto from making reads/writes to that volume going forward.",
			"Varasto does not unmount your volume on the OS level, so you may also need to unmount the disk via your OS-level mechanisms."
		],
		"fields": [
			{ "key": "Id", "hideIfDefaultValue": true }
		]
	},
	{
		"command": "volume.MigrateData",
		"chain": "public",
		"ctor": ["From"],
		"crudNature": "update",
		"title": "Migrate data to another volume",
		"info": [
			"This doesn't mean strictly 'copy data from volume A to volume B' - but more exactly 'copy data that exists in volume A to volume B', i.e. if A's data also exists in C, then both B and C can be used for the actual read operations",
			"In other words, if your disk for volume A breaks, you can use this migrate feature to ensure that what was in A will also be in B (healthy replicas will be used for reads) before you'll decommission volume A"
		],
		"fields": [
			{ "key": "From", "type": "integer", "hideIfDefaultValue": true },
			{ "key": "To", "title": "Migrate to", "placeholder": "(volume)", "type": "custom/integer" }
		]
	},
	{
		"command": "volume.RemoveQueuedReplications",
		"chain": "public",
		"ctor": ["From"],
		"crudNature": "delete",
		"title": "Remove queued replications",
		"info": [
			"This is for when you need to cancel queued replications (write I/Os) - maybe because you need to decommission the volume or for some other reason it can't accept writes anymore (maybe quota is full).",
			"After cancelling the I/Os that were queued, the possible discrepancy between desired and actual replica counts is discoverable for the reconciliation process."
		],
		"fields": [
			{ "key": "From", "type": "integer", "hideIfDefaultValue": true }
		]
	},
	{
		"command": "volume.MarkDataLost",
		"chain": "public",
		"ctor": ["Id"],
		"crudNature": "delete",
		"title": "Mark all volume data lost",
		"additional_confirmation": "I have read the documentation",
		"fields": [
			{ "key": "Id", "type": "integer", "hideIfDefaultValue": true },
			{ "key": "OnlyIfRedundancy", "title": "Abort if blob would lose last replica", "type": "checkbox", "help": "Failsafe for you to reconsider if it losing last replica would come as a surprise." }
		]
	},
	{
		"command": "volume.Decommission",
		"chain": "public",
		"ctor": ["Id"],
		"crudNature": "delete",
		"title": "Decommission the volume",
		"info": [
			"Volume will be hidden from most places in the UI.",
			"For your safety, these things will be checked before decommissioning: volume has to be unmounted, empty and shall have no queued write I/Os. SMART polling must be disabled and none of the replication policies shall refer to it."
		],
		"fields": [
			{ "key": "Id", "type": "integer", "hideIfDefaultValue": true },
			{ "key": "Reason" }
		]
	},
	{
		"command": "directory.Create",
		"chain": "public",
		"ctor": ["Parent"],
		"crudNature": "create",
		"title": "+ Directory",
		"fields": [
			{ "key": "Parent", "hideIfDefaultValue": true },
			{ "key": "Name" }
		]
	},
	{
		"command": "directory.Rename",
		"chain": "public",
		"ctor": ["Id", "Name"],
		"crudNature": "update",
		"title": "Rename",
		"fields": [
			{ "key": "Id", "hideIfDefaultValue": true },
			{ "key": "Name" }
		]
	},
	{
		"command": "directory.ChangeDescription",
		"chain": "public",
		"ctor": ["Id", "Description"],
		"crudNature": "update",
		"title": "Change description",
		"fields": [
			{ "key": "Id", "hideIfDefaultValue": true },
			{ "key": "Description", "optional": true }
		]
	},
	{
		"command": "directory.SetType",
		"chain": "public",
		"ctor": ["Id", "Type"],
		"crudNature": "update",
		"title": "Set directory type",
		"fields": [
			{ "key": "Id", "hideIfDefaultValue": true },
			{ "key": "Type", "type": "DirectoryType", "help": "Available values: generic,movies,series,games,podcasts" }
		]
	},
	{
		"command": "directory.Move",
		"chain": "public",
		"ctor": ["Id"],
		"crudNature": "update",
		"title": "Move",
		"fields": [
			{ "key": "Id", "hideIfDefaultValue": true },
			{ "key": "Directory" }
		]
	},
	{
		"command": "directory.PullTmdbMetadata",
		"chain": "public",
		"ctor": ["Directory"],
		"crudNature": "update",
		"title": "Metadata: pull from TMDb",
		"fields": [
			{ "key": "Directory", "hideIfDefaultValue": true },
			{ "key": "ForeignKey", "title": "Title in TMDb", "placeholder": "Homeland", "type": "custom/string" }
		]
	},
	{
		"command": "directory.ChangeSensitivity",
		"chain": "public",
		"ctor": ["Id","Sensitivity"],
		"crudNature": "update",
		"title": "Change sensitivity",
		"fields": [
			{ "key": "Id", "hideIfDefaultValue": true },
			{ "key": "Sensitivity", "type": "integer" }
		]
	},
	{
		"command": "directory.ChangeReplicationPolicy",
		"chain": "public",
		"ctor": ["Id","Policy"],
		"crudNature": "update",
		"title": "Change replication policy",
		"additional_confirmation": "(current limitation) After changing, you'll have to go to replication policies > reconciliation",
		"fields": [
			{ "key": "Id", "hideIfDefaultValue": true },
			{ "key": "Policy", "optional": true, "type": "custom/string" }
		]
	},
	{
		"command": "directory.Delete",
		"chain": "public",
		"ctor": ["Id"],
		"crudNature": "delete",
		"title": "Delete",
		"fields": [
			{ "key": "Id", "hideIfDefaultValue": true }
		]
	},
	{
		"command": "collection.Create",
		"chain": "public",
		"ctor": ["ParentDir"],
		"crudNature": "create",
		"title": "+ Collection",
		"fields": [
			{ "key": "ParentDir", "hideIfDefaultValue": true },
			{ "key": "Name" }
		]
	},
	{
		"command": "collection.Move",
		"chain": "public",
		"ctor": ["Collections"],
		"crudNature": "update",
		"title": "Move",
		"fields": [
			{ "key": "Collections", "type": "StringList", "hideIfDefaultValue": true },
			{ "key": "Directory", "title": "Directory ID", "placeholder": "B0ddZKryX9k" }
		]
	},
	{
		"command": "collection.Rate",
		"chain": "public",
		"ctor": ["Collection", "Rating"],
		"crudNature": "update",
		"title": "Rate",
		"fields": [
			{ "key": "Collection", "hideIfDefaultValue": true },
			{ "key": "Rating", "type": "integer" }
		]
	},
	{
		"command": "collection.RefreshMetadataAutomatically",
		"chain": "public",
		"ctor": ["Collections"],
		"crudNature": "update",
		"title": "Refresh metadata automatically",
		"fields": [
			{ "key": "Collections", "type": "StringList", "hideIfDefaultValue": true }
		]
	},
	{
		"command": "collection.PullTmdbMetadata",
		"chain": "public",
		"ctor": ["Collection"],
		"crudNature": "update",
		"title": "Metadata: pull from TMDb",
		"info": [
			"You'll see \"Image not available\" for a few seconds because the banner is downloaded in the background."
		],
		"fields": [
			{ "key": "Collection", "hideIfDefaultValue": true },
			{ "key": "ForeignKey", "title": "Title in TMDb", "placeholder": "Top Gun", "type": "custom/string" },
			{ "key": "ScrubName", "title": "Use name from TMDb", "help": "Renames your collection to the official name - if they're different", "type": "checkbox" }
		]
	},
	{
		"command": "collection.PullIgdbMetadata",
		"chain": "public",
		"ctor": ["Collection"],
		"crudNature": "update",
		"title": "Metadata: pull from IGDB",
		"info": [
			"You'll see \"Image not available\" for a few seconds because the artwork is downloaded in the background."
		],
		"fields": [
			{ "key": "Collection", "hideIfDefaultValue": true },
			{ "key": "ForeignKey", "title": "Title in IGDB", "placeholder": "Duke Nukem 3D", "type": "custom/string" },
			{ "key": "ScrubName", "title": "Use name from IGDB", "help": "Renames your collection to the official name - if they're different", "type": "checkbox" }
		]
	},
	{
		"command": "collection.TriggerMediaScan",
		"chain": "public",
		"ctor": ["Collection"],
		"crudNature": "update",
		"title": "Metadata: refresh",
		"info": [
			"If metadata scanner had trouble while automatically trying to fetch metadata, you can trigger manual re-try"
		],
		"fields": [
			{ "key": "Collection", "hideIfDefaultValue": true },
			{ "key": "AllowDestructive", "title": "Allow destructive actions", "help": "If video files have thumbnail with same file base name, move it under metadata as actual thumbnail of that file - even persists across renames.", "type": "checkbox" }
		]
	},
	{
		"command": "collection.ChangeSensitivity",
		"chain": "public",
		"ctor": ["Id","Sensitivity"],
		"crudNature": "update",
		"title": "Change sensitivity",
		"fields": [
			{ "key": "Id", "hideIfDefaultValue": true },
			{ "key": "Sensitivity", "type": "integer" }
		]
	},
	{
		"command": "collection.MoveFilesIntoAnotherCollection",
		"chain": "public",
		"ctor": ["Source", "Files"],
		"crudNature": "update",
		"title": "Move files to another collection",
		"fields": [
			{ "key": "Source", "hideIfDefaultValue": true },
			{ "key": "Files", "type": "StringList", "hideIfDefaultValue": true },
			{ "key": "Destination", "placeholder": "lwwEC91fGeU", "help": "Collection ID" }
		]
	},
	{
		"command": "collection.DeleteFiles",
		"chain": "public",
		"ctor": ["Source", "Files"],
		"crudNature": "delete",
		"title": "Delete files",
		"fields": [
			{ "key": "Source", "hideIfDefaultValue": true },
			{ "key": "Files", "type": "StringList", "hideIfDefaultValue": true }
		]
	},
	{
		"command": "collection.Rename",
		"chain": "public",
		"ctor": ["Collection", "Name"],
		"crudNature": "update",
		"title": "Rename",
		"fields": [
			{ "key": "Collection", "hideIfDefaultValue": true },
			{ "key": "Name" }
		]
	},
	{
		"command": "collection.Delete",
		"chain": "public",
		"ctor": ["Collection"],
		"crudNature": "delete",
		"title": "Delete",
		"additional_confirmation": "If files-to-delete are not deduplicated, they´ll show up later in orphan report",
		"fields": [
			{ "key": "Collection", "hideIfDefaultValue": true },
			{ "key": "Name" }
		]
	},
	{
		"command": "collection.ChangeDescription",
		"chain": "public",
		"ctor": ["Collection", "Description"],
		"crudNature": "update",
		"title": "Change description",
		"fields": [
			{ "key": "Collection", "hideIfDefaultValue": true },
			{ "key": "Description", "optional": true }
		]
	},
	{
		"command": "collection.Tag",
		"chain": "public",
		"ctor": ["Id"],
		"crudNature": "create",
		"title": "Tag",
		"fields": [
			{ "key": "Id", "hideIfDefaultValue": true },
			{ "key": "Tag" }
		]
	},
	{
		"command": "collection.Untag",
		"chain": "public",
		"ctor": ["Id", "Tag"],
		"crudNature": "delete",
		"title": "Untag",
		"fields": [
			{ "key": "Id", "hideIfDefaultValue": true },
			{ "key": "Tag", "hideIfDefaultValue": true }
		]
	},
	{
		"command": "replicationpolicy.Create",
		"chain": "public",
		"ctor": [],
		"crudNature": "create",
		"title": "Create replication policy",
		"info": ["Don't create more policies than you need right now, because we don't support deletion of policies yet."],
		"fields": [
			{ "key": "Name", "placeholder": "Work files" },
			{ "key": "MinZones", "title": "Minimum # of zones", "type": "integer" }
		]
	},
	{
		"command": "replicationpolicy.Rename",
		"chain": "public",
		"ctor": ["Id", "Name"],
		"crudNature": "update",
		"title": "Rename",
		"fields": [
			{ "key": "Id", "hideIfDefaultValue": true },
			{ "key": "Name" }
		]
	},
	{
		"command": "replicationpolicy.ChangeMinZones",
		"chain": "public",
		"ctor": ["Id", "MinZones"],
		"crudNature": "update",
		"title": "Change mininum zones",
		"fields": [
			{ "key": "Id", "hideIfDefaultValue": true },
			{ "key": "MinZones", "type": "integer" }
		]
	},
	{
		"command": "replicationpolicy.ChangeDesiredVolumes",
		"chain": "public",
		"ctor": ["Id"],
		"crudNature": "update",
		"title": "Change desired volumes",
		"fields": [
			{ "key": "Id", "hideIfDefaultValue": true },
			{ "key": "Volume1", "type": "custom/integer", "optional": true, "title": "First volume", "placeholder": "Fry", "help": "First volume is special - it's where the synchronous part of the replica is placed first (before the asynchronous replication kicks off)" },
			{ "key": "Volume2", "type": "custom/integer", "optional": true, "title": "Second volume", "placeholder": "Leela" },
			{ "key": "Volume3", "type": "custom/integer", "optional": true, "title": "Third volume" },
			{ "key": "Volume4", "type": "custom/integer", "optional": true, "title": "Fourth volume" }
		],
		"info": ["You'll usually pick just 1-3 even though we have more boxes (UI limitation..)"]
	},
	{
		"command": "node.SmartScan",
		"chain": "public",
		"ctor": [],
		"crudNature": "create",
		"title": "SMART scan",
		"fields": []
	},
	{
		"command": "node.CheckForUpdates",
		"chain": "public",
		"ctor": [],
		"crudNature": "update",
		"title": "Check for updates",
		"info": ["Result of check will be visible from health view."],
		"fields": []
	},
	{
		"command": "node.ChangeSmartBackend",
		"chain": "public",
		"ctor": ["Id"],
		"crudNature": "update",
		"title": "Change SMART backend",
		"fields": [
			{ "key": "Id", "hideIfDefaultValue": true },
			{ "key": "Backend", "type": "SmartBackend" }
		]
	},
	{
		"command": "node.InstallTlsCert",
		"chain": "public",
		"ctor": ["Id"],
		"crudNature": "update",
		"title": "Install TLS cert",
		"fields": [
			{ "key": "Id", "hideIfDefaultValue": true },
			{ "key": "TlsCertificate", "title": "Certificate", "type": "multiline", "placeholder": "-----BEGIN CERTIFICATE-----\n..." },
			{ "key": "TlsCertificatePrivateKey", "optional": true, "title": "Private key", "type": "multiline", "placeholder": "-----BEGIN EC PRIVATE KEY-----\n..." }
		]
	},
	{
		"command": "kek.GenerateOrImport",
		"chain": "public",
		"ctor": [],
		"crudNature": "create",
		"title": "Generate or import key encryption key",
		"info": [
			"Generating a key might take a long time, especially on lower-powered devices like Raspberry Pis. Be patient :)"
		],
		"fields": [
			{ "key": "Label", "placeholder": "Joonas's primary KEK" },
			{ "key": "Data", "optional": true, "title": "Import existing", "help": "If you want to import existing key, paste it here. Otherwise, a key will be generated for you.", "type": "multiline", "placeholder": "-----BEGIN RSA PUBLIC KEY-----\nMIIBCgKCAQEA+xGZ/wcz9ugFpP07Nspo6U17l0YhFiFpxxU4pTk3Lifz9R3zsIsu\n..." }
		]
	},
	{
		"command": "database.ScanAbandoned",
		"chain": "public",
		"ctor": [],
		"crudNature": "create",
		"title": "Scan for abandoned blobs",
		"fields": []
	},
	{
		"command": "database.DiscoverReconcilableReplicationPolicies",
		"chain": "public",
		"ctor": [],
		"crudNature": "update",
		"title": "Discover reconcilable replication policies",
		"info": ["This can take a few minutes if you have lots of data."],
		"fields": []
	},
	{
		"command": "database.ReconcileReplicationPolicy",
		"chain": "public",
		"ctor": ["Collections"],
		"crudNature": "update",
		"title": "Replicate to volume",
		"fields": [
			{ "key": "Collections", "type": "StringList", "hideIfDefaultValue": true },
			{ "key": "Volume", "type": "custom/integer" }
		]
	},
	{
		"command": "database.Backup",
		"chain": "public",
		"ctor": [],
		"crudNature": "create",
		"additional_confirmation": "I understand that uploading backup can take a long time and I won´t see a progress bar.",
		"title": "Backup database",
		"fields": []
	},
	{
		"command": "database.BackupConfigure",
		"chain": "public",
		"ctor": ["Bucket", "BucketRegion", "AccessKeyId", "AccessKeySecret", "EncryptionPublicKey", "AlertmanagerBaseUrl"],
		"crudNature": "update",
		"title": "Configure backup",
		"fields": [
			{ "key": "Bucket", "title": "S3 bucket", "placeholder": "backups.example.com" },
			{ "key": "BucketRegion", "title": "S3 bucket region", "placeholder": "us-east-1" },
			{ "key": "AccessKeyId", "title": "Access Key ID", "placeholder": "AKIAIOSFODNN7EXAMPLE" },
			{ "key": "AccessKeySecret", "title": "Secret Access Key", "placeholder": "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY" },
			{ "key": "EncryptionPublicKey", "title": "µbackup encryption public key", "type": "multiline", "placeholder": "-----BEGIN RSA PUBLIC KEY-----\nMIIBCgKCAQEA+xGZ/wcz9ugFpP07Nspo6U17l0YhFiFpxxU4pTk3Lifz9R3zsIsu\n..." },
			{ "key": "AlertmanagerBaseUrl", "title": "AlertManager API URL", "placeholder": "https://abcdefghij.execute-api.us-east-1.amazonaws.com/prod", "help": "Only used if you're using lambda-alertmanager", "optional": true },
			{ "key": "ConnectivityCheck", "title": "Perform connectivity check", "type": "checkbox", "help": "Try to connect to S3 to validate connection details" }
		]
	},
	{
		"command": "integrityverificationjob.Resume",
		"chain": "public",
		"ctor": ["JobId"],
		"crudNature": "create",
		"title": "Resume",
		"fields": [
			{ "key": "JobId", "hideIfDefaultValue": true }
		]
	},
	{
		"command": "integrityverificationjob.Stop",
		"chain": "public",
		"ctor": ["JobId"],
		"crudNature": "delete",
		"title": "Stop",
		"fields": [
			{ "key": "JobId", "hideIfDefaultValue": true }
		]
	},
	{
		"command": "config.SetTheMovieDbApikey",
		"chain": "public",
		"ctor": ["Apikey"],
		"crudNature": "update",
		"title": "Set https://themoviedb.org API key",
		"fields": [
			{ "key": "Apikey", "title": "API key", "optional": true, "placeholder": "778afba08c531c549272ecb5621b08d3" },
			{ "key": "Validation", "title": "Validate key", "help": "Makes a test request against the API to validate the key", "type": "checkbox" }
		]
	},
	{
		"command": "config.SetIgdbApikey",
		"chain": "public",
		"ctor": ["Apikey"],
		"crudNature": "update",
		"title": "Set https://www.igdb.com API key",
		"fields": [
			{ "key": "Apikey", "title": "API key", "optional": true, "placeholder": "821ae63dbe0c573eff8b69d451fb21bc" },
			{ "key": "Validation", "title": "Validate key", "help": "Makes a test request against the API to validate the key", "type": "checkbox" }
		]
	},
	{
		"command": "config.SetNetworkShareBaseUrl",
		"chain": "public",
		"ctor": ["Baseurl"],
		"crudNature": "update",
		"title": "Set network share baseurl",
		"fields": [
			{ "key": "Baseurl", "optional": true, "placeholder": "\\\\servername\\varasto" }
		]
	},
	{
		"command": "config.SetGrafanaUrl",
		"chain": "public",
		"ctor": ["Url"],
		"crudNature": "update",
		"title": "Set Grafana URL",
		"fields": [
			{ "key": "Url", "title": "Grafana URL", "optional": true, "placeholder": "https://grafana.example.com/d/LrjytbeZz/varasto?orgId=1&kiosk=tv" }
		]
	},
	{
		"command": "config.SetMediascannerState",
		"chain": "public",
		"ctor": ["State"],
		"crudNature": "update",
		"title": "Set media scanner state",
		"fields": [
			{ "key": "State", "optional": true }
		]
	},
	{
		"command": "fuse.UnmountAll",
		"chain": "public",
		"ctor": [],
		"crudNature": "delete",
		"title": "Unmount all cached mounts",
		"fields": []
	},
	{
		"command": "config.SetFuseServerBaseurl",
		"chain": "public",
		"ctor": ["Baseurl"],
		"crudNature": "update",
		"title": "Set FUSE server baseurl",
		"fields": [
			{ "key": "Baseurl", "optional": true, "placeholder": "http://localhost:8066" }
		]
	},
	{
		"command": "subsystem.Start",
		"chain": "public",
		"ctor": ["Id"],
		"crudNature": "create",
		"title": "Start",
		"fields": [
			{ "key": "Id", "type": "SubsystemId", "hideIfDefaultValue": true }
		]
	},
	{
		"command": "subsystem.Stop",
		"chain": "public",
		"ctor": ["Id"],
		"crudNature": "delete",
		"title": "Stop",
		"fields": [
			{ "key": "Id", "type": "SubsystemId", "hideIfDefaultValue": true }
		]
	},
	{
		"command": "scheduledjob.Start",
		"chain": "public",
		"ctor": ["Id"],
		"crudNature": "create",
		"title": "Start manually",
		"fields": [
			{ "key": "Id", "hideIfDefaultValue": true }
		]
	},
	{
		"command": "scheduledjob.ChangeSchedule",
		"chain": "public",
		"ctor": ["Id", "Schedule"],
		"crudNature": "update",
		"title": "Change schedule",
		"fields": [
			{ "key": "Id", "hideIfDefaultValue": true },
			{ "key": "Schedule", "help": "https://godoc.org/github.com/robfig/cron" }
		]
	},
	{
		"command": "scheduledjob.Enable",
		"chain": "public",
		"ctor": ["Id"],
		"crudNature": "create",
		"title": "Enable",
		"fields": [
			{ "key": "Id", "hideIfDefaultValue": true }
		]
	},
	{
		"command": "scheduledjob.Disable",
		"chain": "public",
		"ctor": ["Id"],
		"crudNature": "delete",
		"title": "Disable",
		"fields": [
			{ "key": "Id", "hideIfDefaultValue": true }
		]
	},
	{
		"command": "apikey.Create",
		"chain": "public",
		"ctor": [],
		"crudNature": "create",
		"title": "Create API key",
		"fields": [
			{ "key": "Name", "help": "Describe where the key will be used.", "placeholder": "Bob's work computer" }
		]
	},
	{
		"command": "apikey.Remove",
		"chain": "public",
		"ctor": ["Id"],
		"crudNature": "delete",
		"title": "Remove API key",
		"fields": [
			{ "key": "Id", "hideIfDefaultValue": true }
		]
	}
]
